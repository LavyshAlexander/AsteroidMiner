<Window x:Class="Game.Newt.v2.MissileCommand.MissileCommand0D"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Missile Command 0D" FontFamily="/Game.Newt.v2.MissileCommand;component/Resources/#Share Tech Mono" Background="Black" Foreground="{DynamicResource mainForegroundBrush}" Width="1000" Height="750" Loaded="Window_Loaded" Closed="Window_Closed">
    <Window.Resources>
        <SolidColorBrush x:Key="mainForegroundBrush" Color="#FFDC00"/>
        <SolidColorBrush x:Key="buttonBorderBrush" Color="#2A3E7F"/>
        <SolidColorBrush x:Key="mainPanelBorderBrush" Color="#1C3A7F"/>


        <DataTemplate x:Key="expanderHeader">
            <TextBlock Text="{Binding}" FontSize="24" FontWeight="600" Foreground="{StaticResource mainForegroundBrush}"/>
        </DataTemplate>
        <Style TargetType="Expander">
            <Setter Property="HeaderTemplate" Value="{StaticResource expanderHeader}"/>
            <!--<Setter Property="ContentTemplate" Value="{StaticResource expanderContent}"/>-->
        </Style>

        <Style x:Key="panelBorder" TargetType="Border">
            <Setter Property="CornerRadius" Value="3"/>
            <Setter Property="BorderThickness" Value="2"/>
            <Setter Property="BorderBrush" Value="#4D5464"/>
            <Setter Property="Background" Value="#7A1E00"/>
            <Setter Property="Margin" Value="0,4"/>
            <Setter Property="Padding" Value="8"/>
        </Style>

        <Style TargetType="Button">
            <Setter Property="Margin" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Name="buttonTemplateBorder" BorderBrush="{StaticResource buttonBorderBrush}" BorderThickness="1" CornerRadius="2">
                            <Border.Style>
                                <Style TargetType="{x:Type Border}">
                                    <Setter Property="Background" Value="#78B83F" />
                                </Style>
                            </Border.Style>
                            <TextBlock Text="{TemplateBinding Button.Content}" Foreground="#15224C" FontSize="14" FontWeight="500" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="8,4"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter TargetName="buttonTemplateBorder" Property="Background" Value="#85CC46" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter TargetName="buttonTemplateBorder" Property="Background" Value="#65A62B" />
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>









        <SolidColorBrush x:Key="checkNormalBackBrush" Color="#FFFFFF"/>
        <SolidColorBrush x:Key="checkMouseOverBackBrush" Color="#FFE5A3"/>
        <SolidColorBrush x:Key="checkPressedBackBrush" Color="#C2D3FF"/>

        <SolidColorBrush x:Key="checkDisabledForegroundBrush" Color="#888" />
        <SolidColorBrush x:Key="checkDisabledBackgroundBrush" Color="#EEE" />
        <SolidColorBrush x:Key="checkDisabledBorderBrush" Color="#AAA" />

        <SolidColorBrush x:Key="checkGlyphBrush" Color="#444" />

        <Style TargetType="TextBlock">
            <Setter Property="Foreground" Value="{StaticResource mainForegroundBrush}"/>
            <Setter Property="FontSize" Value="14"/>
        </Style>
        
        <Style TargetType="TextBox">
            <Setter Property="BorderBrush" Value="#44599C"/>
        </Style>


        <Style TargetType="CheckBox">
            <Setter Property="Foreground" Value="{StaticResource mainForegroundBrush}"/>
            <Setter Property="FontSize" Value="14"/>

            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="CheckBox">
                        <BulletDecorator Background="Transparent">
                            <BulletDecorator.Bullet>
                                <Border x:Name="Border" Width="13" Height="13" CornerRadius="0" Background="{StaticResource checkNormalBackBrush}" BorderThickness="1" BorderBrush="{StaticResource buttonBorderBrush}">
                                    <Path Width="7" Height="7" x:Name="CheckMark" SnapsToDevicePixels="False" Stroke="{StaticResource checkGlyphBrush}" StrokeThickness="2" Data="M 0 0 L 7 7 M 0 7 L 7 0" />
                                </Border>
                            </BulletDecorator.Bullet>
                            <ContentPresenter Margin="4,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Left" RecognizesAccessKey="True"/>
                        </BulletDecorator>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="false">
                                <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="{x:Null}">
                                <Setter TargetName="CheckMark" Property="Data" Value="M 0 7 L 7 0" />
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource checkMouseOverBackBrush}" />
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource checkPressedBackBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource buttonBorderBrush}" />
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter TargetName="Border" Property="Background" Value="{StaticResource checkDisabledBackgroundBrush}" />
                                <Setter TargetName="Border" Property="BorderBrush" Value="{StaticResource checkDisabledBorderBrush}" />
                                <Setter Property="Foreground" Value="{StaticResource checkDisabledForegroundBrush}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>

        </Style>

    </Window.Resources>

    <Grid Margin="6">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="auto"/>
            <ColumnDefinition Width="6"/>
            <ColumnDefinition Width="1*"/>
            <!-- TODO: May want a grid splitter on this one -->
            <ColumnDefinition Width="6"/>
            <ColumnDefinition Width="1*"/>
        </Grid.ColumnDefinitions>

        <ScrollViewer Grid.Column="0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
            <StackPanel>

                <!-- Game -->
                <Expander IsExpanded="False" Header="Game">
                    <Border Style="{StaticResource panelBorder}">
                    </Border>
                </Expander>

                <!-- Agents -->
                <Expander IsExpanded="False" Header="Agents">
                    <Border Style="{StaticResource panelBorder}">
                    </Border>
                </Expander>

                <!-- Test1 -->
                <Expander IsExpanded="True" Header="Test1">
                    <Border Style="{StaticResource panelBorder}">
                        <StackPanel>
                            <Button Content="Set Bot" Click="SetBot_Click"/>
                            <Button Content="Clear Bot" Click="ClearBot_Click"/>
                            <Button Content="Bot Viewer" Click="BotViewer_Click"/>

                            <Button Content="Show Asteroid" Margin="0,9,0,1" Click="ShowAsteroid_Click"/>
                            <!-- TODO: May want to come up with custom map parts for {add ammo, add health, add energy} -->
                            <Button Content="Show Emerald" Click="ShowEmerald_Click"/>
                            <Button Content="Apply Item" ToolTip="Either helps or harms the bot" Click="ApplyItem_Click"/>
                            <Button Content="Remove Item" Click="RemoveItem_Click"/>

                            <Button Content="save images" Margin="0,9,0,1" Click="SaveImages_Click"/>
                        </StackPanel>
                    </Border>
                </Expander>

                <!-- Ship-Bot -->
                <Expander IsExpanded="False" Header="Ship-Bot">
                    <Border Style="{StaticResource panelBorder}">
                        <StackPanel>
                            <Button Content="1" Click="ShipBot1_Click"/>
                            <Button Content="del seg trend 1a" ToolTip="Figure out an equation for the number of expected delaunay links by points (3D)" Click="DelaunaySegmentEquation1a_Click"/>
                            <Button Content="del seg trend 1b" ToolTip="Same as 1a, but fewer sample points" Click="DelaunaySegmentEquation1b_Click"/>
                            <Button Content="del seg trend 2" ToolTip="This calculates the number of links by nodes" Click="DelaunaySegmentEquation2_Click"/>
                            <Button Content="bezier mesh" Click="BezierMesh_Click"/>
                            <Button Content="bezier mesh flipX" Click="BezierMeshFlipX_Click"/>
                            <Button Content="bezier mesh flipY" Click="BezierMeshFlipY_Click"/>
                            <Button Content="bezier mesh flipXY" Click="BezierMeshFlipXY_Click"/>
                            <Button Content="timings" Click="ConstructionTimings_Click"/>
                        </StackPanel>
                    </Border>
                </Expander>



                <!-- Options -->
                <Expander IsExpanded="True" Header="Options">
                    <Border Style="{StaticResource panelBorder}">
                        <StackPanel>
                            <!-- ****** RBG Recognizer Settings ****** -->

                            <!-- Is Color -->
                            <CheckBox IsChecked="True" Name="chkColorVision" Content="Color Vision"/>

                            <!-- Convolutions -->
                            <CheckBox IsChecked="True" Name="chkEdgeDetect" Content="Edge Detect" Margin="0,4,0,0"/>

                            <!-- Resolution -->
                            <Grid Margin="0,4,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto"/>
                                    <ColumnDefinition Width="4"/>
                                    <ColumnDefinition Width="1*"/>
                                </Grid.ColumnDefinitions>
                                
                                <TextBox Grid.Column="0" Name="txtFinalResolution" Text="10" MinWidth="25" VerticalAlignment="Center"/>
                                <TextBlock Grid.Column="2" Text="Final Resolution" VerticalAlignment="Center"/>
                            </Grid>

                            <!-- Timings (stored in itemoptions) -->

                            <!-- Should SOM discard dupes -->
                            <CheckBox IsChecked="False" Name="chkDiscardDupes" Content="Discard dupe images" Margin="0,12,0,0"/>
                            <!-- TODO: SOM resolution could be something different (7) -->

                            <!-- Use SOM -->
                            <!-- Use NonLifeEvents -->
                            <!-- Use Random NonPoints -->
                        </StackPanel>
                    </Border>
                </Expander>





            </StackPanel>
        </ScrollViewer>

        <ScrollViewer Grid.Column="2" Name="panelCustom" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">

        </ScrollViewer>

        <Grid Grid.Column="4">
            <Grid.RowDefinitions>
                <RowDefinition Height="1*"/>
                <RowDefinition Height="6"/>
                <RowDefinition Height="1*"/>
            </Grid.RowDefinitions>

            <Border Grid.Row="0" BorderBrush="{StaticResource mainPanelBorderBrush}" BorderThickness="2" CornerRadius="3">
                <Grid  Name="grdViewPort">
                    <Grid.Background>
                        <RadialGradientBrush>
                            <RadialGradientBrush.GradientStops>
                                <GradientStop Color="#FF000000" Offset="0"/>
                                <GradientStop Color="#FF080808" Offset="0.416517"/>
                                <!-- TODO: When there is an explosion, animate the color of this stop a bit orange then back -->
                                <!-- Or animate it red when the bot gets hit -->
                                <GradientStop Color="#FF161616" Offset="0.885099"/>
                                <GradientStop Color="#FF1A1A1A" Offset="1"/>
                            </RadialGradientBrush.GradientStops>
                        </RadialGradientBrush>
                    </Grid.Background>

                    <Viewport3D Name="_viewport" IsHitTestVisible="False">
                        <!-- Camera -->
                        <Viewport3D.Camera>
                            <PerspectiveCamera x:Name="_camera" Position="0,50,0" LookDirection="0,-1,0" UpDirection="0,0,1" FieldOfView="45"/>
                            <!--<PerspectiveCamera x:Name="_camera" Position="0,15,0" LookDirection="0,-1,0" UpDirection="0,0,1" FieldOfView="45"/>-->
                        </Viewport3D.Camera>
                        <!-- Lights -->
                        <ModelVisual3D>
                            <ModelVisual3D.Content>
                                <Model3DGroup>
                                    <AmbientLight Color="DimGray" />
                                    <DirectionalLight Color="White" Direction="1,-1,-1" />
                                    <DirectionalLight Color="#303030" Direction="-1,1,1" />
                                </Model3DGroup>
                            </ModelVisual3D.Content>
                        </ModelVisual3D>
                    </Viewport3D>
                </Grid>
            </Border>

            <!-- Progress Meters -->
            <Border Grid.Row="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="8">
                <StackPanel Name="pnlProgressBars">

                    <!-- This will be populated programatically -->

                </StackPanel>
            </Border>

        </Grid>

    </Grid>
</Window>
